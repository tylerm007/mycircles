[
    {
        "role": "user",
        "content": "You are a helpful expert in react and JavaScript"
    },
    {
        "role": "user",
        "content": "## Context\n\nGenerate the Circle.js file for a React Admin application using the following instructions.  \n\n---\n\n### Per-Resource Files (Required)\n\nSample code (follow these guidelines EXACTLY):\n\n<sample-code>\n// begin MANDATORY imports (always generated EXACTLY)\nimport React from 'react';\nimport { List, FunctionField, Datagrid, TextField, DateField, NumberField } from 'react-admin';\nimport { ReferenceField, ReferenceManyField } from 'react-admin';\nimport { TabbedShowLayout, Tab, SimpleShowLayout, TextInput, NumberInput, DateTimeInput } from 'react-admin';\nimport { ReferenceInput, SelectInput, SimpleForm, Show, Edit, Create } from 'react-admin';\nimport { Filter, Pagination, BooleanField, BooleanInput, Labeled } from 'react-admin'; \nimport { EditButton, DeleteButton, CreateButton } from 'react-admin';\nimport { Grid, Typography, Box, Divider, Button } from '@mui/material';\nimport { useRecordContext, useRedirect, Link, required } from 'react-admin';\nimport AddIcon from '@mui/icons-material/Add';\n// end mandatory imports\n\n// Filter for Customer List\nconst CustomerFilter = (props) => (\n    <Filter {...props}>\n        <TextInput label=\"Search\" source=\"name\" alwaysOn />\n        <BooleanInput label=\"Email Opt Out\" source=\"email_opt_out\" />\n    </Filter>\n);\n\n// Customer List\nexport const CustomerList = (props) => {\n    return (\n        <List filters={<CustomerFilter />} {...props} sort={{ field: 'name', order: 'ASC' }} pagination={<Pagination rowsPerPageOptions={[5, 10, 25]} showFirstLastButtons />}>\n            <Datagrid rowClick=\"show\">\n                <TextField source=\"name\" label=\"Name\" />\n                <NumberField source=\"balance\" label=\"Balance\" />\n                ...\n            </Datagrid>\n        </List>\n    );\n};\n\n\n// Customer Show\nexport const CustomerShow = (props) => {\n    return (\n        <Show {...props}>\n            <SimpleShowLayout>\n                <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 2, fontWeight: 'bold' }}>\n                        Customer Information\n                    </Typography>\n                    <Grid container spacing={3} sx={{ mb: 2 }}>\n                        <Grid item xs={12} sm={6} md={3}>\n                            <Box sx={{ p: 1 }}>\n                                <Labeled label=\"Name\">\n                                    <TextField source=\"name\" />\n                                </Labeled>\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={3}>\n                            <Box sx={{ p: 1 }}>\n                                <Labeled label=\"Balance\">\n                                    <NumberField source=\"balance\" options={{ style: 'currency', currency: 'USD' }} />\n                                </Labeled>\n                            </Box>\n                        </Grid>\n                    </Grid>\n                    ...\n                    <Divider sx={{ my: 2 }} />\n                </Box>\n            </SimpleShowLayout>\n            <TabbedShowLayout>\n                <Tab label=\"Orders\">\n                    <ReferenceManyField reference=\"Order\" target=\"customer_id\" addLabel={false} pagination={<Pagination />}>\n                        <Datagrid rowClick=\"show\">\n                            <TextField source=\"id\" label=\"Order ID\" />\n                            <TextField source=\"notes\" label=\"Notes\" />\n                            <DateField source=\"CreatedOn\" label=\"Created On\" />\n                            <NumberField source=\"amount_total\" label=\"Amount Total\" options={{ style: 'currency', currency: 'USD' }} />\n                            <DateField source=\"date_shipped\" label=\"Date Shipped\" />\n                            <EditButton />\n                            <DeleteButton />\n                        </Datagrid>\n                    </ReferenceManyField>\n                    <AddOrderButton />\n                </Tab>\n                ...\n            </TabbedShowLayout>\n        </Show>\n    );\n};\n\n// Custom Add Order Button\nconst AddOrderButton = () => {\n    const record = useRecordContext();\n    const redirect = useRedirect();\n    \n    const handleClick = () => {\n        // Use the newer React Admin approach for pre-filling forms\n        redirect(`/Order/create?source=${encodeURIComponent(JSON.stringify({ customer_id: record?.id }))}`);\n    };\n\n    return (\n        <Button\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<AddIcon />}\n            onClick={handleClick}\n            sx={{ mt: 2 }}\n        >\n            Add New Order\n        </Button>\n    );\n};\n\n// Customer Create\nexport const CustomerCreate = (props) => {\n    return (\n        <Create {...props}>\n            <SimpleForm>\n                <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 2, fontWeight: 'bold' }}>\n                        Create New Customer\n                    </Typography>\n                    <Grid container spacing={3} sx={{ mb: 2 }}>\n                        <Grid item xs={12} sm={6} md={4}>\n                            <Box sx={{ p: 1 }}>\n                                <TextInput source=\"name\" label=\"Name\" fullWidth />\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={4}>\n                            <Box sx={{ p: 1 }}>\n                                <NumberInput source=\"balance\" label=\"Balance\" fullWidth />\n                            </Box>\n                        </Grid>\n                        ...\n                    </Grid>\n                </Box>\n            </SimpleForm>\n        </Create>\n    );\n};\n\n// Customer Edit\nexport const CustomerEdit = (props) => {\n    return (\n        <Edit {...props} redirect={false}>\n            <SimpleForm>\n                <Box sx={{ mb: 3 }}>\n                    <Typography variant=\"h5\" component=\"h2\" sx={{ mb: 2, fontWeight: 'bold' }}>\n                        Edit Customer\n                    </Typography>\n                    <Grid container spacing={3} sx={{ mb: 2 }}>\n                        <Grid item xs={12} sm={6} md={4}>\n                            <Box sx={{ p: 1 }}>\n                                <TextInput source=\"name\" label=\"Name\" fullWidth />\n                            </Box>\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={4}>\n                            <Box sx={{ p: 1 }}>\n                                <NumberInput source=\"balance\" label=\"Balance\" fullWidth />\n                            </Box>\n                        </Grid>\n                        ...\n                    </Grid>\n                </Box>\n            </SimpleForm>\n        </Edit>\n    );\n};\n\nexport default {\n    list: CustomerList,\n    show: CustomerShow,\n    create: CustomerCreate,\n    edit: CustomerEdit,\n};\n\n</sample-code>\n\nFor each resource (`Customer`, `Order` etc) and **fully** implement:\n    * `CustomerList`\n    * `CustomerShow`\n    * `CustomerCreate`\n    * `CustomerEdit`\n\nUse:\n\n- `<ReferenceField>` for foreign key displays\n- `<ReferenceInput>` for foreign key input, like this (IMPORTANT: validate is on SelectInput, NEVER ReferenceInput )\n```\n<ReferenceInput source=\"customer_id\" reference=\"Customer\" fullWidth>\n    <SelectInput optionText=\"name\" validate={required()} />\n</ReferenceInput>\n```\n- `<ReferenceManyField>` for tabbed child lists\n\nUse the attribute order from the schema.\n\nDO NOT use `<EmailInput>` - use `<TextInput>`.\n\nDO NOT put `<ReferenceField>` in `<Datagrid>`.\n\n---\n\n### Architecture\n\n- **Framework**: React 18 + react-admin 4.x\n- **Data Provider**: Custom pre-built in src/rav4-jsonapi-client\n- **CORS**: Ensure API allows `http://localhost:3000`\n\n```py\n  from flask_cors import CORS  \n  CORS(app, origins='*')  # or restrict to localhost:3000\n```\n\n## Response Format\n\nFormat the response as a JSResponseFormat:\n\nclass JSResponseFormat(BaseModel):  # must match system/genai/prompt_inserts/response_format.prompt\n    code : str # generated javascript code (only)\n"
    },
    {
        "role": "user",
        "content": "Schema:\nBackend JSONAPI endpoint metadata is described in the following <resources> section , each key is a resource collection endpoint name.\nThe tab_groups attribute describes the resource relationships, with fks being the foreign keys of the related resource.\nuser_key tells which attribute should be shown when referencing the resource. for example, if the user_key is \"name\", the resource should be be shown by its \"name\" in the UI, while its reference should be by its \"id\".\n\n\n<resources>\n{\n    \"Card\": {\n        \"attributes\": [\n            {\n                \"label\": \" fellowship_name*\",\n                \"name\": \"fellowship_name\",\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"card_type\"\n            },\n            {\n                \"name\": \"fellowship_name\"\n            },\n            {\n                \"name\": \"circle_text\",\n                \"required\": true\n            },\n            {\n                \"name\": \"is_active\",\n                \"type\": \"Boolean\"\n            },\n            {\n                \"name\": \"id\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"CardSelectionList\",\n                \"resource\": \"CardSelection\"\n            },\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"CardTagList\",\n                \"resource\": \"CardTag\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"card_type\"\n                ],\n                \"name\": \"cardtype\",\n                \"resource\": \"Cardtype\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"fellowship\",\n                \"resource\": \"Fellowship\"\n            }\n        ],\n        \"type\": \"Card\",\n        \"user_key\": \"fellowship_name\"\n    },\n    \"CardSelection\": {\n        \"attributes\": [\n            {\n                \"label\": \" id*\",\n                \"name\": \"id\",\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"card_id\"\n            },\n            {\n                \"name\": \"circle_type\"\n            },\n            {\n                \"name\": \"user_id\"\n            },\n            {\n                \"name\": \"selected_date\",\n                \"required\": true,\n                \"type\": \"DATE\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"ResponseList\",\n                \"resource\": \"Response\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"card\",\n                \"resource\": \"Card\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"circle_type\"\n                ],\n                \"name\": \"circle\",\n                \"resource\": \"Circle\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"user_id\"\n                ],\n                \"name\": \"user\",\n                \"resource\": \"User\"\n            }\n        ],\n        \"type\": \"CardSelection\",\n        \"user_key\": \"id\"\n    },\n    \"CardTag\": {\n        \"attributes\": [\n            {\n                \"label\": \" id*\",\n                \"name\": \"id\",\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"card_id\",\n                \"required\": true\n            },\n            {\n                \"name\": \"tag_id\",\n                \"required\": true\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"card\",\n                \"resource\": \"Card\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"tag_id\"\n                ],\n                \"name\": \"tag\",\n                \"resource\": \"Tag\"\n            }\n        ],\n        \"type\": \"CardTag\",\n        \"user_key\": \"id\"\n    },\n    \"Cardtype\": {\n        \"attributes\": [\n            {\n                \"label\": \" card_type*\",\n                \"name\": \"card_type\",\n                \"required\": true,\n                \"search\": true,\n                \"sort\": true\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"card_type\"\n                ],\n                \"name\": \"CardList\",\n                \"resource\": \"Card\"\n            }\n        ],\n        \"type\": \"Cardtype\",\n        \"user_key\": \"card_type\"\n    },\n    \"Circle\": {\n        \"attributes\": [\n            {\n                \"label\": \" circle_type*\",\n                \"name\": \"circle_type\",\n                \"required\": true,\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"decription\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"circle_type\"\n                ],\n                \"name\": \"CardSelectionList\",\n                \"resource\": \"CardSelection\"\n            }\n        ],\n        \"type\": \"Circle\",\n        \"user_key\": \"circle_type\"\n    },\n    \"DailyReponseCount\": {\n        \"attributes\": [\n            {\n                \"label\": \" user_id*\",\n                \"name\": \"user_id\",\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"response_date\",\n                \"required\": true,\n                \"type\": \"DATE\"\n            },\n            {\n                \"name\": \"count_inner\"\n            },\n            {\n                \"name\": \"count_middle\"\n            },\n            {\n                \"name\": \"count_outer\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"user_id\",\n                    \"response_date\"\n                ],\n                \"name\": \"ResponseList\",\n                \"resource\": \"Response\"\n            }\n        ],\n        \"type\": \"DailyReponseCount\",\n        \"user_key\": \"user_id\"\n    },\n    \"Fellowship\": {\n        \"attributes\": [\n            {\n                \"label\": \" name*\",\n                \"name\": \"name\",\n                \"required\": true,\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"full_name\"\n            },\n            {\n                \"name\": \"website\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"CardList\",\n                \"resource\": \"Card\"\n            },\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"TagList\",\n                \"resource\": \"Tag\"\n            },\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"UserList\",\n                \"resource\": \"User\"\n            }\n        ],\n        \"type\": \"Fellowship\",\n        \"user_key\": \"name\"\n    },\n    \"Response\": {\n        \"attributes\": [\n            {\n                \"label\": \" id*\",\n                \"name\": \"id\",\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"card_id\"\n            },\n            {\n                \"name\": \"user_id\"\n            },\n            {\n                \"name\": \"user_id\"\n            },\n            {\n                \"name\": \"response_date\",\n                \"required\": true,\n                \"type\": \"DATE\"\n            },\n            {\n                \"name\": \"response_text\"\n            },\n            {\n                \"name\": \"response_bool\",\n                \"type\": \"Boolean\"\n            },\n            {\n                \"name\": \"response_range\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"card_id\"\n                ],\n                \"name\": \"card\",\n                \"resource\": \"CardSelection\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"user_id\",\n                    \"response_date\"\n                ],\n                \"name\": \"daily_reponse_count\",\n                \"resource\": \"DailyReponseCount\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"user_id\"\n                ],\n                \"name\": \"user\",\n                \"resource\": \"User\"\n            }\n        ],\n        \"type\": \"Response\",\n        \"user_key\": \"id\"\n    },\n    \"Tag\": {\n        \"attributes\": [\n            {\n                \"label\": \" tag_name*\",\n                \"name\": \"tag_name\",\n                \"required\": true,\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"fellowship_name\",\n                \"required\": true\n            },\n            {\n                \"name\": \"id\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"tag_id\"\n                ],\n                \"name\": \"CardTagList\",\n                \"resource\": \"CardTag\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"fellowship\",\n                \"resource\": \"Fellowship\"\n            }\n        ],\n        \"type\": \"Tag\",\n        \"user_key\": \"tag_name\"\n    },\n    \"User\": {\n        \"attributes\": [\n            {\n                \"label\": \" name*\",\n                \"name\": \"name\",\n                \"required\": true,\n                \"search\": true,\n                \"sort\": true\n            },\n            {\n                \"name\": \"fellowship_name\"\n            },\n            {\n                \"name\": \"password_hash\"\n            },\n            {\n                \"name\": \"password_salt\"\n            },\n            {\n                \"name\": \"email\"\n            },\n            {\n                \"name\": \"cell\"\n            },\n            {\n                \"name\": \"id\"\n            }\n        ],\n        \"tab_groups\": [\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"user_id\"\n                ],\n                \"name\": \"CardSelectionList\",\n                \"resource\": \"CardSelection\"\n            },\n            {\n                \"direction\": \"tomany\",\n                \"fks\": [\n                    \"user_id\"\n                ],\n                \"name\": \"ResponseList\",\n                \"resource\": \"Response\"\n            },\n            {\n                \"direction\": \"toone\",\n                \"fks\": [\n                    \"fellowship_name\"\n                ],\n                \"name\": \"fellowship\",\n                \"resource\": \"Fellowship\"\n            }\n        ],\n        \"type\": \"User\",\n        \"user_key\": \"name\"\n    }\n} \n\nMost of the time, the resource name key will be the same as the type, \nso you can use an instance type to get the resource configuration.\n\nignore SPAPage and SPASection resources.\n\nThis resource configuration can be used when importing the Config getConf() function in the react code, for example:\n\n<javascriptCode>\nimport { getConf } from '../../Config';\nconst conf = getConf();\nconst resources = conf.resources;\n</javascriptCode>\nThis JSONAPI is fetched using the react-admin dataProvider (useDataprovider hook).\nAll resources have a \"type\" and \"id\" attributes (according to the JSONAPI specification).\n\nBesides the regular parameters, the dataProvider is extended to interpret the \"include\" meta parameter to retrieve included relationships.\n\n<javascriptCode>\ndataProvider.getList(resourceName, {\n            pagination: { page: 1, perPage: 10 },\n            meta: { include: [\"relationship_name\"]}\n})\n</javascriptCode>\n\nattributes are inlined in the instance: \nfor example, if the resource is \"some_resource\" and the attribute is \"name\", then 'some_resource.name' will be the attribute value.\n\nincluded relationships are inlined in the instance:\nfor example, if the resource is \"some_resource\" and the relationship is \"relationship_name\", the included data will be in the instance \"relationship_name\" key (some_resource.relationship_name).\nSo:\nsome_resource.relationship_name.id will be the id of the included (toone) relationship.\nsome_resource.relationship_name will be an array of included (tomany) relationships.\n\ninstances have a \"relationships\" key, which contains a dictionary of the relationships, for example, \nfollowing is the response for a resource with a tomany relationship named \"tomany_relationships_name\"\n<json>\n{\n    \"tomany_relationships_name\": {\n        \"data\": [\n            {\n                \"id\": \"1\",\n                \"type\": \"Transaction\"\n            }\n        ],\n        \"meta\": {\n            \"count\": 1,\n            \"limit\": 5,\n            \"total\": 1\n        }\n    },\n    \"toone_relationsip_name\": {\n        \"data\": {\n            \"id\": \"1\",\n            \"type\": \"Customer\"\n        }\n    }\n}\n</json>\n\nThe actual relationship data is in the \"data\" key of the relationship.\nfor example, the 'instance.tomany_relationships_name' will be an array of the instances data of the related resource:\n<json>\n[\n    {\n        \"id\": \"1\",\n        \"ja_type\": \"Transaction\",\n        \"attributes\": {\n            \"Type\": \"withdrawal\",\n            \"account_id\": 1,\n            \"amount\": 500,\n            \"description\": \"Grocery Shopping\",\n            \"transaction_date\": \"2022-03-01\"\n        },\n        \"Type\": \"withdrawal\",\n        \"account_id\": 1,\n        \"amount\": 500,\n        \"description\": \"Grocery Shopping\",\n        \"transaction_date\": \"2022-03-01\",\n        \"relationships\": {\n            \"account\": {\n                \"data\": null\n            }\n        },\n        \"account\": null\n    }\n]\n</json>\n\nsimilarly, the 'instance.toone_relationship_name' will be the instance data of the related resource:\n<json>\n{\n    \"id\": \"1\",\n    \"credit_limit\": 10000,\n    \"first_name\": \"Alice\",\n    \"last_name\": \"Brown\",\n}\n</json>\nif a toone relationship is empty, it's value will be null.\n\nif you want to fetch all related resources, you can use the 'meta: { include: [\"+all\"]}' parameter in the dataProvider.getList call.\n\n"
    },
    {
        "role": "user",
        "content": "Generate the full javascript source code for the `Circle.js` React Admin file, formatted as a JSResponseFormat"
    }
]